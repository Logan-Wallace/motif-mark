-------------------------------
Lab Notebook for Motif Mark OOP
-------------------------------
Logan Wallace 
-------------
2/20/2023
---------

The purpose of this assignment is to write a python script using object oriented programing 
to parse through a fasta file containing a gene sequence and identify motifs within for specific
transcriptional regulators and represent them visually using an output generated with Pycairo

# Goals
Create a repository in your GitHub profile called motif-mark and write a python script using object-oriented code to visualize motifs on sequences. It is HIGHLY RECOMMENDED that you utilize frequent commits on this assignment so that you can revert if additions break your code.

# Data
This file contains data about motifs
Fig_1_motifs.txt
This file contains the gene sequence we are going to be searching
Figure_1.fasta

# Minimum requirements
Well commented, Python3 compatible, object-oriented code, with CLEAR readme.md file
Public GitHub repo named motif-mark [WARNING! Assignment will not be graded if repo incorrectly named!]
Script named motif-mark-oop.py [WARNING! Assignment will not be graded if script incorrectly named!]
Use argparse with options: [WARNING! Assignment will not be graded if argparse options not as requested!]
-f: fasta file
-m: motifs file
Output file has same prefix as input file (e.g. Figure_1.fa -> Figure_1.png)
Input FASTA file (seqs ≤1000 bases) and motifs file (≤10 bases each, one motif per line in a text file)
Capable of handling:
Motifs with ambiguous nucleotides (see https://en.wikipedia.org/wiki/Nucleic_acid_notationLinks to an external site.)
Multiple sequences (max 10 in the data you will be provided)
Multiple motifs (max 5 in the data you will be provided)
Consider:
How you will handle overlapping motifs
How you will denote introns/exons
All features (motifs, introns, exons) should be to scale
Output single, well-labeled figure, per FASTA file
png output
Key/labeling
Should be able to be run in the following environment:
conda create -n my_pycairo pycairo
conda activate my_pycairo
[WARNING! Assignment will not be graded if other packages are required!]
# Stretch goals
Staggered drawing of motifs (along the y-axis) to better show position of overlapping motifs
Transform information in FASTA header to more readable figure title
You can find Leslie's pycairo example here: pycairo_ex.ipynbDownload pycairo_ex.ipynb

To turn in, submit a link to your GitHub repo and a png of your final figure.

# Starting the assignment
- Created a github repo named 'motif-mark'
- Started writing a python script titled 'motif-mark-oop.py'
- Started this lab notebook
- Pulled the github repo down to bioinfo/Bi625/motif-mark
- Installed pycairo % pip install pycairo (pycairo was already installed with python3.10!)

# OoCA Motif Mark
This Out of Class Assignment is meant to get you thinking about the classes you might want to implement for OOP Motif Mark, as well as get you to play around with pycairo. Submit:

A list of classes you might need for OOP Motif Mark (in English, not code)
[OPTIONAL] How those classes might interact (in English, not code)
Working code to generate a line and a rectangle, not at the origin, using pycairo (NOT a jupyter notebook)
The image that your code created

    Class - "Gene"
        Data to include;
        Name: Gene Name
        Sequence: Gene sequence
        Location start and end: Location in genome or irrelevant if downstream we just get relative location for "Exon" and "Motif"
    Class - "Exon"
        Data to include;
        Sequence: Exon nucleotide sequence 
        Location start and end: given in bp or in relation to start
    Class - "Intron"
        Data to include;
        Sequence: Intron sequence
        Location Start and End: given in bp or relation to start
    Class - "Motif"
        Data to include;
            Sequence: string, EX 'ACTY'
            Location start and end: given in bp or relation to start 
            Regulation: Up/Down/Ambiguous 

Wrote a python script to make a rectangle and a line using pycairo - 'drawing.py'

2/21/23 - In class time working on motif-mark-oop.py

2/27/23 - Study in KC basement

2/28/23 - Open Lab Time

To this point I have a program that will
1. Look through a motifs.txt file and store the evident motifs as motif objects
2. Read through a fasta file containing our genes and store them as gene objects

Now I need to...
1. Write a function for the gene class that will search itself for exons and pass them along to the exon class
    What information are we going to need to do this? We need to search along the gene for capital letters, keeping track of where within the gene the exon is by location

3/1/23

#Finding the exon within the gene using regular expressions!
pattern = re.compile("[A-Z]+")
exon = pattern.search(sequence)
startStop = exon.span()
start = startStop[0]
stop = startStop[1]
exon_sequence = exon.group()
print(start, stop, exon_sequence)

What is a "Y" when considering gene sequence and how am I going to impute that as a pattern in a regex search?
    A "Y" is encoding for any pyrimidine aka C or T bases. So when encoding this with regular expressions I am going to have to figure out how to encode that as a pattern. Perhaps I can use Y = re.compile("[C|T]")

3/2/23

Jupyter notebook about solving how to search for motifs in genes using regex - 'Regex practice for motif-mark.ipynb'

3/6/23 - Drawing the gene 

To this point, we've read in our files, collected our genes and motifs and looked within the genes for motifs and exons. Now we need to draw our genes in one single .png file using pycairo.

Tutorial can be found here - https://pycairo.readthedocs.io/en/latest/tutorial/introduction.html

We are going to start by creating a canvas, the default was 256x256. Using '''$cat online.fasta | head -n 2 | tail -n 1 | wc''' we can see that our gene is 549 nucleotides long. We want to leave room on either end and also make sure that we have room 

Scratch the above, I forgot to recognize that our genes are going to be scaled onto our canvas so this isn't critical. We will use 256 Width x Height (64 x # of genes) and center our genes at increments of 32 on the canvas.

### Drawing the gene line

The gene line is going to be centered at increments of 32 from the top or bottom because we are using a multiple of 64 to increment the height for each gene we have. So we will start a line at x0, y0 (0, (genenumber x 32)) and move to x1, y1 (exon start, genenumber x 32) and start again at exon end drawing to gene end. We probably just want to collect this vertical center at the beginning (y0) by taking genenumber by 

To draw our exon,
ctx.rectangle(0, 0, 1, 1)  # Rectangle(x0, y0, x1, y1)
ctx.set_source(pat)
ctx.fill()
We might want to exclude the ctx.fill part however because we want to be able to show our motifs within the exons if they are occurring. 



